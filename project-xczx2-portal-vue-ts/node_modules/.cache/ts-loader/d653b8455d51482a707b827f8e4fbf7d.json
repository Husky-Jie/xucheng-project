{"remainingRequest":"D:\\itcast2022\\xc_edu3.0\\code_148_backup\\project-xczx2-portal-vue-ts\\node_modules\\babel-loader\\lib\\index.js!D:\\itcast2022\\xc_edu3.0\\code_148_backup\\project-xczx2-portal-vue-ts\\node_modules\\ts-loader\\index.js??ref--14-2!D:\\itcast2022\\xc_edu3.0\\code_148_backup\\project-xczx2-portal-vue-ts\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\itcast2022\\xc_edu3.0\\code_148_backup\\project-xczx2-portal-vue-ts\\src\\utils\\uploadtools.ts","dependencies":[{"path":"D:\\itcast2022\\xc_edu3.0\\code_148_backup\\project-xczx2-portal-vue-ts\\src\\utils\\uploadtools.ts","mtime":1663126030689},{"path":"D:\\itcast2022\\xc_edu3.0\\code_148_backup\\project-xczx2-portal-vue-ts\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1660903053464},{"path":"D:\\itcast2022\\xc_edu3.0\\code_148_backup\\project-xczx2-portal-vue-ts\\node_modules\\babel-loader\\lib\\index.js","mtime":1576202003988},{"path":"D:\\itcast2022\\xc_edu3.0\\code_148_backup\\project-xczx2-portal-vue-ts\\node_modules\\ts-loader\\index.js","mtime":1660903053026},{"path":"D:\\itcast2022\\xc_edu3.0\\code_148_backup\\project-xczx2-portal-vue-ts\\node_modules\\eslint-loader\\index.js","mtime":1577501200723}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IHsgdXBSZWdpc3RlciwgY2hlY2tjaHVuaywgdXBDaHVuaywgbWVyZ2VDaHVua3MgfSBmcm9tICdAL2FwaS91cGxvYWQnOwppbXBvcnQgQ3J5cHRvSlMgZnJvbSAnY3J5cHRvLWpzJzsKZXhwb3J0IHZhciB1cGxvYWRCeVBpZWNlcyA9IGZ1bmN0aW9uIHVwbG9hZEJ5UGllY2VzKF9yZWYpIHsKICB2YXIgZmlsZSA9IF9yZWYuZmlsZSwKICAgICAgX3JlZiRwaWVjZVNpemUgPSBfcmVmLnBpZWNlU2l6ZSwKICAgICAgcGllY2VTaXplID0gX3JlZiRwaWVjZVNpemUgPT09IHZvaWQgMCA/IDIgOiBfcmVmJHBpZWNlU2l6ZSwKICAgICAgc3VjY2VzcyA9IF9yZWYuc3VjY2VzcywKICAgICAgZXJyb3IgPSBfcmVmLmVycm9yOwogIC8vIOS4iuS8oOi/h+eoi+S4reeUqOWIsOeahOWPmOmHjwogIHZhciBmaWxlTUQ1ID0gIiI7IC8vIG1kNeWKoOWvhuaWh+S7tueahOagh+ivhgoKICB2YXIgY2h1bmtTaXplID0gcGllY2VTaXplICogMTAyNCAqIDEwMjQ7IC8vIOWIhueJh+Wkp+WwjwoKICB2YXIgY2h1bmtDb3VudCA9IE1hdGguY2VpbChmaWxlLnNpemUgLyBjaHVua1NpemUpOyAvLyDmgLvniYfmlbAKICAvL+W+l+WIsOafkOS4gOeJh+eahOWIhueJhwoKICB2YXIgZ2V0Q2h1bmtJbmZvID0gZnVuY3Rpb24gZ2V0Q2h1bmtJbmZvKGZpbGUsIGN1cnJlbnRDaHVuaywgY2h1bmtTaXplKSB7CiAgICB2YXIgc3RhcnQgPSBjdXJyZW50Q2h1bmsgKiBjaHVua1NpemU7CiAgICB2YXIgZW5kID0gTWF0aC5taW4oZmlsZS5zaXplLCBzdGFydCArIGNodW5rU2l6ZSk7CiAgICB2YXIgY2h1bmsgPSBmaWxlLnJhdy5zbGljZShzdGFydCwgZW5kKTsKICAgIHJldHVybiBjaHVuazsKICB9OyAvLyDnrKzkuIDmraUKCgogIHZhciByZWFkRmlsZU1ENSA9IGZ1bmN0aW9uIHJlYWRGaWxlTUQ1KCkgewogICAgLy/lvpfliLDnrKzkuIDniYflkozmnIDlkI7kuIDniYcKICAgIHZhciBzdGFydENodW5rID0gZ2V0Q2h1bmtJbmZvKGZpbGUsIDAsIGNodW5rU2l6ZSk7CiAgICB2YXIgZW5kQ2h1bmsgPSBnZXRDaHVua0luZm8oZmlsZSwgY2h1bmtDb3VudCAtIDEsIGNodW5rU2l6ZSk7IC8v5a+556ys5LiA54mH6L+b6KGM6L2s56CB54S25ZCObWQ15Yqg5a+G77yM572R5LiK5b6I5aSa5piv55u05o6l5a+55pW05Liq5paH5Lu26L2s56CB5Yqg5a+G5b6X5Yiw5qCH6K+G77yM5L2G5piv5oiR5Y+R546w5aSn5paH5Lu25bCk5YW25piv5Yeg5LiqR+eahOaWh+S7tuS8muW0qea6g++8jOaJgOS7peaIkeaYr+WFiOWIhueJh+eEtuWQjuWPluesrOS4gOeJh+WKoOWvhgoKICAgIHZhciBmaWxlUmVkZXJJbnN0YW5jZSA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICBmaWxlUmVkZXJJbnN0YW5jZS5yZWFkQXNCaW5hcnlTdHJpbmcoZmlsZS5yYXcpOwogICAgZmlsZVJlZGVySW5zdGFuY2UuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsIGZ1bmN0aW9uIChlKSB7CiAgICAgIHZhciBmaWxlQm9sYiA9IGUudGFyZ2V0LnJlc3VsdDsKICAgICAgZmlsZU1ENSA9IENyeXB0b0pTLk1ENShDcnlwdG9KUy5lbmMuTGF0aW4xLnBhcnNlKGZpbGVCb2xiKSkudG9TdHJpbmcoKTsgLy8g5LiK5Lyg5YmN5o+Q5Lqk5rOo5YaMIC0g5Y+C5pWwCgogICAgICB2YXIgcGFyYW1zID0gewogICAgICAgIGZpbGVNZDU6IGZpbGVNRDUgLy8gZmlsZU5hbWU6ZmlsZS5uYW1lLAogICAgICAgIC8vIGZpbGVTaXplOmZpbGUuc2l6ZSwKICAgICAgICAvLyBtaW1ldHlwZTpmaWxlLnJhdy50eXBlLAogICAgICAgIC8vIGZpbGVFeHQ6ZmlsZS5uYW1lLnNwbGl0KCcuJykuYXQoLTEpCgogICAgICB9OyAvLyDkuIrkvKDliY3mj5DkuqTms6jlhowgLSDmjqXlj6PosIPnlKgKCiAgICAgIHVwUmVnaXN0ZXIocGFyYW1zKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBpZiAocmVzLmNvZGUgPT0gMCkgewogICAgICAgICAgcmVhZENodW5rTUQ1KDApOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgIHJldHVybiBlcnJvcihlcnIpOwogICAgICB9KTsKICAgIH0pOwogIH07IC8vIOmSiOWvueavj+S4quWIhueJh+aWh+S7tui/m+ihjOS4iuS8oOWkhOeQhgoKCiAgdmFyIHJlYWRDaHVua01ENSA9IGZ1bmN0aW9uIHJlYWRDaHVua01ENShudW0pIHsKICAgIHZhciBjaHVuazsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gcmVhZENodW5rTUQ1JChfY29udGV4dDMpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgaWYgKCEobnVtIDw9IGNodW5rQ291bnQgLSAxKSkgewogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy/lvpfliLDlvZPliY3pnIDopoHkuIrkvKDnmoTliIbniYfmlofku7YKICAgICAgICAgICAgY2h1bmsgPSBnZXRDaHVua0luZm8oZmlsZSwgbnVtLCBjaHVua1NpemUpOyAvLyDkuIrkvKDliIblnZfliY3mo4Dmn6UKICAgICAgICAgICAgLy9hd2FpdCBjaGVja2NodW5rKHtmaWxlTWQ1OmZpbGVNRDUsY2h1bms6bnVtLGNodW5rU2l6ZTpjaHVua0NvdW50fSkudGhlbiggYXN5bmMgcmVzID0+IHsKCiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcChjaGVja2NodW5rKHsKICAgICAgICAgICAgICBmaWxlTWQ1OiBmaWxlTUQ1LAogICAgICAgICAgICAgIGNodW5rOiBudW0KICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiBfY2FsbGVlMihyZXMpIHsKICAgICAgICAgICAgICB2YXIgZmV0Y2hGb3JtOwogICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUuYXN5bmMoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLmNvZGUgPT0gMCAmJiByZXMucmVzdWx0ID09IGZhbHNlKSkgewogICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIC8vIOWIhuWdl+S4iuS8oAogICAgICAgICAgICAgICAgICAgICAgZmV0Y2hGb3JtID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgICAgICAgICAgICAgICAgICBmZXRjaEZvcm0uYXBwZW5kKCJmaWxlIiwgY2h1bmspOwogICAgICAgICAgICAgICAgICAgICAgZmV0Y2hGb3JtLmFwcGVuZCgiZmlsZU1kNSIsIGZpbGVNRDUpOwogICAgICAgICAgICAgICAgICAgICAgZmV0Y2hGb3JtLmFwcGVuZCgiY2h1bmsiLCBudW0pOwogICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3OwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh1cENodW5rKGZldGNoRm9ybSkudGhlbihmdW5jdGlvbiBfY2FsbGVlKHJlcykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLmFzeW5jKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOS4iuS8oOaIkOWKnwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtOiBudW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua0NvdW50OiBjaHVua0NvdW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICd1cGxvYWRpbmcnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuY29kZSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkQ2h1bmtNRDUobnVtICsgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IoZXJyKTsKICAgICAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKHsKICAgICAgICAgICAgICAgICAgICAgICAgbnVtOiBudW0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rQ291bnQ6IGNodW5rQ291bnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAndXBsb2FkaW5nJwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICByZWFkQ2h1bmtNRDUobnVtICsgMSk7CgogICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNzsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAvLyDkuIrkvKDnu5PmnZ/or7fmsYLlkIjlubYKICAgICAgICAgICAgLy8g5o+Q5Lqk5ZCI5bm2CiAgICAgICAgICAgIG1lcmdlQ2h1bmtzKHsKICAgICAgICAgICAgICBmaWxlTWQ1OiBmaWxlTUQ1LAogICAgICAgICAgICAgIGZpbGVOYW1lOiBmaWxlLm5hbWUsCiAgICAgICAgICAgICAgY2h1bmtUb3RhbDogY2h1bmtDb3VudCAvLyBtaW1ldHlwZTpmaWxlLnJhdy50eXBlLAogICAgICAgICAgICAgIC8vIGZpbGVFeHQ6ZmlsZS5uYW1lLnNwbGl0KCcuJykuYXQoLTEpIAoKICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAgICAgLy8g5ZCI5bm25oiQ5Yqf5LqGCiAgICAgICAgICAgICAgc3VjY2Vzcyh7CiAgICAgICAgICAgICAgICBudW06IG51bSwKICAgICAgICAgICAgICAgIGNodW5rQ291bnQ6IGNodW5rQ291bnQsCiAgICAgICAgICAgICAgICBzdGF0ZTogJ3N1Y2Nlc3MnCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICBlcnJvcihlcnIpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH07CgogIHJlYWRGaWxlTUQ1KCk7IC8vIOW8gOWni+aJp+ihjOS7o+eggQp9Ow=="},{"version":3,"sources":["D:\\itcast2022\\xc_edu3.0\\code_148_backup\\project-xczx2-portal-vue-ts\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\itcast2022\\xc_edu3.0\\code_148_backup\\project-xczx2-portal-vue-ts\\src\\utils\\uploadtools.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,UAAT,EAAqB,UAArB,EAAiC,OAAjC,EAA0C,WAA1C,QAA6D,cAA7D;AACA,OAAO,QAAP,MAAqB,WAArB;AACA,OAAO,IAAM,cAAc,GAAG,SAAjB,cAAiB,OAAgD;AAAA,MAA7C,IAA6C,QAA7C,IAA6C;AAAA,4BAAvC,SAAuC;AAAA,MAAvC,SAAuC,+BAA3B,CAA2B;AAAA,MAAxB,OAAwB,QAAxB,OAAwB;AAAA,MAAf,KAAe,QAAf,KAAe;AAC1E;AACA,MAAI,OAAO,GAAG,EAAd,CAF0E,CAExD;;AAClB,MAAM,SAAS,GAAG,SAAS,GAAG,IAAZ,GAAmB,IAArC,CAH0E,CAG/B;;AAC3C,MAAM,UAAU,GAAG,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,IAAL,GAAY,SAAtB,CAAnB,CAJ0E,CAIrB;AAErD;;AACA,MAAM,YAAY,GAAG,SAAf,YAAe,CAAC,IAAD,EAAO,YAAP,EAAqB,SAArB,EAAkC;AACrD,QAAI,KAAK,GAAG,YAAY,GAAG,SAA3B;AACA,QAAI,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,IAAd,EAAoB,KAAK,GAAG,SAA5B,CAAV;AACA,QAAI,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,KAAf,EAAsB,GAAtB,CAAZ;AACA,WAAO,KAAP;AACD,GALD,CAP0E,CAc1E;;;AACA,MAAM,WAAW,GAAG,SAAd,WAAc,GAAK;AACvB;AACA,QAAM,UAAU,GAAG,YAAY,CAAC,IAAD,EAAO,CAAP,EAAU,SAAV,CAA/B;AACA,QAAM,QAAQ,GAAG,YAAY,CAAC,IAAD,EAAO,UAAU,GAAG,CAApB,EAAuB,SAAvB,CAA7B,CAHuB,CAIvB;;AACA,QAAI,iBAAiB,GAAG,IAAI,UAAJ,EAAxB;AACA,IAAA,iBAAiB,CAAC,kBAAlB,CAAqC,IAAI,CAAC,GAA1C;AACA,IAAA,iBAAiB,CAAC,gBAAlB,CAAmC,MAAnC,EAA2C,UAAC,CAAD,EAAM;AACjD,UAAI,QAAQ,GAAI,CAAC,CAAC,MAAF,CAAiB,MAAjC;AACA,MAAA,OAAO,GAAG,QAAQ,CAAC,GAAT,CAAa,QAAQ,CAAC,GAAT,CAAa,MAAb,CAAoB,KAApB,CAA0B,QAA1B,CAAb,EAAkD,QAAlD,EAAV,CAFiD,CAG/C;;AACA,UAAM,MAAM,GAAG;AACb,QAAA,OAAO,EAAC,OADK,CAEb;AACA;AACA;AACA;;AALa,OAAf,CAJ+C,CAW/C;;AACA,MAAA,UAAU,CAAC,MAAD,CAAV,CAAmB,IAAnB,CAAwB,UAAA,GAAG,EAAG;AAC5B,YAAI,GAAG,CAAC,IAAJ,IAAY,CAAhB,EAAkB;AAChB,UAAA,YAAY,CAAC,CAAD,CAAZ;AACD;AACF,OAJD,EAIG,KAJH,CAIS,UAAA,GAAG;AAAA,eAAI,KAAK,CAAC,GAAD,CAAT;AAAA,OAJZ;AAMD,KAlBD;AAmBD,GA1BD,CAf0E,CA2C1E;;;AACA,MAAM,YAAY,GAAG,SAAf,YAAe,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACf,GAAG,IAAI,UAAU,GAAG,CADL;AAAA;AAAA;AAAA;;AAElB;AACO,YAAA,KAHW,GAGH,YAAY,CAAC,IAAD,EAAO,GAAP,EAAY,SAAZ,CAHT,EAIjB;AACA;;AALiB;AAAA,4CAMT,UAAU,CAAC;AAAC,cAAA,OAAO,EAAC,OAAT;AAAiB,cAAA,KAAK,EAAC;AAAvB,aAAD,CAAV,CAAwC,IAAxC,CAA8C,kBAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAChD,GAAG,CAAC,IAAJ,IAAY,CAAZ,IAAiB,GAAG,CAAC,MAAJ,IAAc,KADiB;AAAA;AAAA;AAAA;;AAElD;AACI,sBAAA,SAH8C,GAGlC,IAAI,QAAJ,EAHkC;AAIlD,sBAAA,SAAS,CAAC,MAAV,CAAiB,MAAjB,EAAyB,KAAzB;AACA,sBAAA,SAAS,CAAC,MAAV,CAAiB,SAAjB,EAA4B,OAA5B;AACA,sBAAA,SAAS,CAAC,MAAV,CAAiB,OAAjB,EAA0B,GAA1B;AANkD;AAAA,sDAO5C,OAAO,CAAC,SAAD,CAAP,CAAmB,IAAnB,CAAwB,iBAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAC5B;AACA,gCAAA,OAAO,CAAC;AAAC,kCAAA,GAAG,EAAH,GAAD;AAAM,kCAAA,UAAU,EAAV,UAAN;AAAkB,kCAAA,KAAK,EAAC;AAAxB,iCAAD,CAAP;;AACA,oCAAG,GAAG,CAAC,IAAJ,IAAY,CAAf,EAAiB;AACf,kCAAA,YAAY,CAAC,GAAG,GAAC,CAAL,CAAZ;AACD;;AAL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAxB,EAMH,KANG,CAMG,UAAA,GAAG,EAAG;AACb,wBAAA,KAAK,CAAC,GAAD,CAAL;AACD,uBARK,CAP4C;;AAAA;AAAA;AAAA;;AAAA;AAiBlD,sBAAA,OAAO,CAAC;AAAC,wBAAA,GAAG,EAAH,GAAD;AAAM,wBAAA,UAAU,EAAV,UAAN;AAAkB,wBAAA,KAAK,EAAC;AAAxB,uBAAD,CAAP;AACA,sBAAA,YAAY,CAAC,GAAG,GAAC,CAAL,CAAZ;;AAlBkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA9C,CANS;;AAAA;AAAA;AAAA;;AAAA;AA4BjB;AACA;AACA,YAAA,WAAW,CAAC;AACV,cAAA,OAAO,EAAC,OADE;AAEV,cAAA,QAAQ,EAAC,IAAI,CAAC,IAFJ;AAGV,cAAA,UAAU,EAAC,UAHD,CAIV;AACA;;AALU,aAAD,CAAX,CAMG,IANH,CAMQ,UAAA,GAAG,EAAG;AACV;AACA,cAAA,OAAO,CAAC;AAAC,gBAAA,GAAG,EAAH,GAAD;AAAM,gBAAA,UAAU,EAAV,UAAN;AAAkB,gBAAA,KAAK,EAAC;AAAxB,eAAD,CAAP;AACD,aATH,EASK,KATL,CASW,UAAA,GAAG,EAAG;AACX,cAAA,KAAK,CAAC,GAAD,CAAL;AACH,aAXH;;AA9BiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AA6CA,EAAA,WAAW,GAzF+D,CAyF3D;AAChB,CA1FI","sourcesContent":["import { upRegister, checkchunk, upChunk, mergeChunks } from '@/api/upload'\nimport CryptoJS from 'crypto-js'\nexport const uploadByPieces = ({ file, pieceSize = 2, success, error }:any) => {\n    // 上传过程中用到的变量\n    let fileMD5 = \"\"; // md5加密文件的标识\n    const chunkSize = pieceSize * 1024 * 1024; // 分片大小\n    const chunkCount = Math.ceil(file.size / chunkSize); // 总片数\n    \n    //得到某一片的分片\n    const getChunkInfo = (file, currentChunk, chunkSize) => {\n      let start = currentChunk * chunkSize;\n      let end = Math.min(file.size, start + chunkSize);\n      let chunk = file.raw.slice(start, end);\n      return chunk;\n    };\n\n    // 第一步\n    const readFileMD5 = () => {\n      //得到第一片和最后一片\n      const startChunk = getChunkInfo(file, 0, chunkSize);\n      const endChunk = getChunkInfo(file, chunkCount - 1, chunkSize);\n      //对第一片进行转码然后md5加密，网上很多是直接对整个文件转码加密得到标识，但是我发现大文件尤其是几个G的文件会崩溃，所以我是先分片然后取第一片加密\n      let fileRederInstance = new FileReader();\n      fileRederInstance.readAsBinaryString(file.raw);\n      fileRederInstance.addEventListener(\"load\", (e) => {\n      let fileBolb = (e.target as any).result;\n      fileMD5 = CryptoJS.MD5(CryptoJS.enc.Latin1.parse(fileBolb)).toString()\n        // 上传前提交注册 - 参数\n        const params = {\n          fileMd5:fileMD5\n          // fileName:file.name,\n          // fileSize:file.size,\n          // mimetype:file.raw.type,\n          // fileExt:file.name.split('.').at(-1)\n        }\n        // 上传前提交注册 - 接口调用\n        upRegister(params).then(res => {\n          if (res.code == 0){\n            readChunkMD5(0)\n          }\n        }).catch(err => error(err))\n        \n      });\n    };\n\n    // 针对每个分片文件进行上传处理\n    const readChunkMD5 = async (num) => {\n      if (num <= chunkCount - 1) {\n       //得到当前需要上传的分片文件\n        const chunk = getChunkInfo(file, num, chunkSize);\n        // 上传分块前检查\n        //await checkchunk({fileMd5:fileMD5,chunk:num,chunkSize:chunkCount}).then( async res => {\n          await checkchunk({fileMd5:fileMD5,chunk:num}).then( async res => {\n          if (res.code == 0 && res.result == false){\n            // 分块上传\n            let fetchForm = new FormData();\n            fetchForm.append(\"file\", chunk);\n            fetchForm.append(\"fileMd5\", fileMD5);\n            fetchForm.append(\"chunk\", num);\n            await upChunk(fetchForm).then(async res => {\n              // 上传成功\n              success({num, chunkCount, state:'uploading'})\n              if(res.code == 0){\n                readChunkMD5(num+1) \n              }\n            }).catch(err => {\n              error(err)\n            })\n          } else {\n            success({num, chunkCount, state:'uploading'})\n            readChunkMD5(num+1) \n          }\n        })\n      } else {\n        // 上传结束请求合并\n        // 提交合并\n        mergeChunks({\n          fileMd5:fileMD5,\n          fileName:file.name,\n          chunkTotal:chunkCount\n          // mimetype:file.raw.type,\n          // fileExt:file.name.split('.').at(-1) \n        }).then(res => {\n            // 合并成功了\n            success({num, chunkCount, state:'success'})\n          }).catch(err => {\n              error(err)\n          })\n      }\n    };\n\n    readFileMD5(); // 开始执行代码\n  }"],"sourceRoot":""}]}